// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Agiil.Tests.Domain.Tickets
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Editing a ticket")]
    public partial class EditingATicketFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "EditATicket.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Editing a ticket", "  A user should be able to edit an existing ticket when they are logged in.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A user can edit a ticket title and description and save it.")]
        public virtual void AUserCanEditATicketTitleAndDescriptionAndSaveIt_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A user can edit a ticket title and description and save it.", ((string[])(null)));
#line 4
this.ScenarioSetup(scenarioInfo);
#line 5
  testRunner.Given("the user is logged in with a user account named 'jbloggs'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[]
                {
                        "Id",
                        "Title",
                        "Creator",
                        "Description",
                        "Created"});
            table1.AddRow(new string[]
                {
                        "4",
                        "FooBar",
                        "jbloggs",
                        "This is a sample description",
                        "2011-01-01 13:20:01"});
#line 6
    testRunner.And("there are a number of tickets with the following properties:", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[]
                {
                        "Id",
                        "Title",
                        "Description"});
            table2.AddRow(new string[]
                {
                        "4",
                        "Test",
                        "This is a test ticket"});
#line 9
   testRunner.When("the user requests to edit a ticket title and description with the following specification:", ((string)(null)), table2, "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[]
                {
                        "Field",
                        "Value"});
            table3.AddRow(new string[]
                {
                        "Id",
                        "4"});
            table3.AddRow(new string[]
                {
                        "Title",
                        "Test"});
            table3.AddRow(new string[]
                {
                        "Description",
                        "This is a test ticket"});
            table3.AddRow(new string[]
                {
                        "User",
                        "jbloggs"});
#line 12
   testRunner.Then("a ticket should exist with the following properties:", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A user cannot save an edited ticket if they set the title to an empty string")]
        public virtual void AUserCannotSaveAnEditedTicketIfTheySetTheTitleToAnEmptyString()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A user cannot save an edited ticket if they set the title to an empty string", ((string[])(null)));
#line 19
this.ScenarioSetup(scenarioInfo);
#line 20
  testRunner.Given("the user is logged in with a user account named 'jbloggs'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[]
                {
                        "Id",
                        "Title",
                        "Creator",
                        "Description",
                        "Created"});
            table4.AddRow(new string[]
                {
                        "4",
                        "FooBar",
                        "jbloggs",
                        "This is a sample description",
                        "2011-01-01 13:20:01"});
#line 21
    testRunner.And("there are a number of tickets with the following properties:", ((string)(null)), table4, "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[]
                {
                        "Id",
                        "Title",
                        "Description"});
            table5.AddRow(new string[]
                {
                        "4",
                        "",
                        "This is a test ticket"});
#line 24
   testRunner.When("the user requests to edit a ticket title and description with the following specification:", ((string)(null)), table5, "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[]
                {
                        "Field",
                        "Value"});
            table6.AddRow(new string[]
                {
                        "Id",
                        "4"});
            table6.AddRow(new string[]
                {
                        "Title",
                        ""});
            table6.AddRow(new string[]
                {
                        "Description",
                        "This is a test ticket"});
            table6.AddRow(new string[]
                {
                        "User",
                        "jbloggs"});
#line 27
   testRunner.Then("no ticket should exist matching the following properties:", ((string)(null)), table6, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[]
                {
                        "Field",
                        "Value"});
            table7.AddRow(new string[]
                {
                        "Id",
                        "4"});
            table7.AddRow(new string[]
                {
                        "Title",
                        "FooBar"});
            table7.AddRow(new string[]
                {
                        "Description",
                        "This is a sample description"});
            table7.AddRow(new string[]
                {
                        "User",
                        "jbloggs"});
#line 33
    testRunner.And("a ticket should exist with the following properties:", ((string)(null)), table7, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
