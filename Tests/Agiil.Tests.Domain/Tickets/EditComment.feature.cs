// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Agiil.Tests.Domain.Tickets
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Editing an existing comment on a ticket")]
    public partial class EditingAnExistingCommentOnATicketFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "EditComment.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Editing an existing comment on a ticket", "  A user should be able to edit their own comments.\n  Users cannot edit comments which do not belong to them.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A user can edit their own comment")]
        public virtual void AUserCanEditTheirOwnComment()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A user can edit their own comment", ((string[])(null)));
#line 5
this.ScenarioSetup(scenarioInfo);
#line 6
  testRunner.Given("the user is logged in with a user account named 'jbloggs'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 7
    testRunner.And("there is a ticket with ID 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[]
                {
                        "Id",
                        "Author",
                        "Body"});
            table1.AddRow(new string[]
                {
                        "6",
                        "jbloggs",
                        "Test"});
#line 8
    testRunner.And("ticket ID 5 has the following comments:", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[]
                {
                        "CommentId",
                        "Body"});
            table2.AddRow(new string[]
                {
                        "6",
                        "Sample"});
#line 11
  testRunner.When("the user submits a request to edit a comment with the following specification:", ((string)(null)), table2, "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[]
                {
                        "Field",
                        "Value"});
            table3.AddRow(new string[]
                {
                        "Id",
                        "6"});
            table3.AddRow(new string[]
                {
                        "TicketId",
                        "5"});
            table3.AddRow(new string[]
                {
                        "Author",
                        "jbloggs"});
            table3.AddRow(new string[]
                {
                        "Body",
                        "Sample"});
#line 14
   testRunner.Then("a comment should exist with the following properties:", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A user cannot edit another user's comments")]
        public virtual void AUserCannotEditAnotherUserSComments()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A user cannot edit another user's comments", ((string[])(null)));
#line 21
this.ScenarioSetup(scenarioInfo);
#line 22
  testRunner.Given("the user is logged in with a user account named 'jbloggs'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 23
    testRunner.And("there is a user account named 'sallyann'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 24
    testRunner.And("there is a ticket with ID 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[]
                {
                        "Id",
                        "Author",
                        "Body"});
            table4.AddRow(new string[]
                {
                        "6",
                        "sallyann",
                        "Test"});
#line 25
    testRunner.And("ticket ID 5 has the following comments:", ((string)(null)), table4, "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[]
                {
                        "CommentId",
                        "Body"});
            table5.AddRow(new string[]
                {
                        "6",
                        "Sample"});
#line 28
  testRunner.When("the user submits a request to edit a comment with the following specification:", ((string)(null)), table5, "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[]
                {
                        "Field",
                        "Value"});
            table6.AddRow(new string[]
                {
                        "Id",
                        "6"});
            table6.AddRow(new string[]
                {
                        "Body",
                        "Sample"});
#line 31
   testRunner.Then("no comment should exist with the following properties:", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A user cannot set a comment's body to an empty string")]
        public virtual void AUserCannotSetACommentSBodyToAnEmptyString()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A user cannot set a comment's body to an empty string", ((string[])(null)));
#line 36
this.ScenarioSetup(scenarioInfo);
#line 37
  testRunner.Given("the user is logged in with a user account named 'jbloggs'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 38
    testRunner.And("there is a user account named 'sallyann'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 39
    testRunner.And("there is a ticket with ID 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[]
                {
                        "Id",
                        "Author",
                        "Body"});
            table7.AddRow(new string[]
                {
                        "6",
                        "sallyann",
                        "Test"});
#line 40
    testRunner.And("ticket ID 5 has the following comments:", ((string)(null)), table7, "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[]
                {
                        "CommentId",
                        "Body"});
            table8.AddRow(new string[]
                {
                        "6",
                        ""});
#line 43
  testRunner.When("the user submits a request to edit a comment with the following specification:", ((string)(null)), table8, "When ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[]
                {
                        "Field",
                        "Value"});
            table9.AddRow(new string[]
                {
                        "Id",
                        "6"});
            table9.AddRow(new string[]
                {
                        "Body",
                        ""});
#line 46
   testRunner.Then("no comment should exist with the following properties:", ((string)(null)), table9, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A user cannot edit a comment which does not exist")]
        public virtual void AUserCannotEditACommentWhichDoesNotExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A user cannot edit a comment which does not exist", ((string[])(null)));
#line 52
this.ScenarioSetup(scenarioInfo);
#line 53
  testRunner.Given("the user is logged in with a user account named 'jbloggs'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 54
    testRunner.And("there is a user account named 'sallyann'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 55
    testRunner.And("there is a ticket with ID 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[]
                {
                        "Id",
                        "Author",
                        "Body"});
            table10.AddRow(new string[]
                {
                        "6",
                        "sallyann",
                        "Test"});
#line 56
    testRunner.And("ticket ID 5 has the following comments:", ((string)(null)), table10, "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[]
                {
                        "CommentId",
                        "Body"});
            table11.AddRow(new string[]
                {
                        "7",
                        "Sample"});
#line 59
  testRunner.When("the user submits a request to edit a comment with the following specification:", ((string)(null)), table11, "When ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[]
                {
                        "Field",
                        "Value"});
            table12.AddRow(new string[]
                {
                        "Id",
                        "7"});
#line 62
   testRunner.Then("no comment should exist with the following properties:", ((string)(null)), table12, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
