//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/craig/Projects/Agiil/Agiil.QueryLanguage.Antlr/AgiilQuery.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Agiil.QueryLanguage {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class AgiilQueryParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		BOM=1, OPENPAREN=2, CLOSEPAREN=3, EQUALS=4, NOTEQUALS=5, TILDE=6, COMMA=7, 
		DOUBLEQUOTE=8, WHITESPACE=9, NOT=10, AND=11, OR=12, ORDERBY=13, DESCENDING=14, 
		ASCENDING=15, NAME=16, WORD=17, QUOTEDVALUE=18, ANY=19;
	public const int
		RULE_search = 0, RULE_criteria = 1, RULE_logicalcriteriagroups = 2, RULE_criterionorgroup = 3, 
		RULE_criteriagroup = 4, RULE_criterion = 5, RULE_elementtest = 6, RULE_logicaloperator = 7, 
		RULE_element = 8, RULE_predicate = 9, RULE_predicatename = 10, RULE_value = 11, 
		RULE_constantvalue = 12, RULE_functioninvocation = 13, RULE_functionparameters = 14, 
		RULE_orders = 15, RULE_orderelement = 16;
	public static readonly string[] ruleNames = {
		"search", "criteria", "logicalcriteriagroups", "criterionorgroup", "criteriagroup", 
		"criterion", "elementtest", "logicaloperator", "element", "predicate", 
		"predicatename", "value", "constantvalue", "functioninvocation", "functionparameters", 
		"orders", "orderelement"
	};

	private static readonly string[] _LiteralNames = {
		null, "'\uFEFF'", "'('", "')'", "'='", "'!='", "'~'", "','", "'\"'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "BOM", "OPENPAREN", "CLOSEPAREN", "EQUALS", "NOTEQUALS", "TILDE", 
		"COMMA", "DOUBLEQUOTE", "WHITESPACE", "NOT", "AND", "OR", "ORDERBY", "DESCENDING", 
		"ASCENDING", "NAME", "WORD", "QUOTEDVALUE", "ANY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AgiilQuery.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static AgiilQueryParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AgiilQueryParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AgiilQueryParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class SearchContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(AgiilQueryParser.Eof, 0); }
		public ITerminalNode BOM() { return GetToken(AgiilQueryParser.BOM, 0); }
		public CriteriaContext criteria() {
			return GetRuleContext<CriteriaContext>(0);
		}
		public OrdersContext orders() {
			return GetRuleContext<OrdersContext>(0);
		}
		public SearchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_search; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAgiilQueryVisitor<TResult> typedVisitor = visitor as IAgiilQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSearch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SearchContext search() {
		SearchContext _localctx = new SearchContext(Context, State);
		EnterRule(_localctx, 0, RULE_search);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BOM) {
				{
				State = 34; Match(BOM);
				}
			}

			State = 38;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPENPAREN || _la==NAME) {
				{
				State = 37; criteria();
				}
			}

			State = 41;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDERBY) {
				{
				State = 40; orders();
				}
			}

			State = 43; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CriteriaContext : ParserRuleContext {
		public LogicalcriteriagroupsContext logicalcriteriagroups() {
			return GetRuleContext<LogicalcriteriagroupsContext>(0);
		}
		public CriteriaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_criteria; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAgiilQueryVisitor<TResult> typedVisitor = visitor as IAgiilQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCriteria(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CriteriaContext criteria() {
		CriteriaContext _localctx = new CriteriaContext(Context, State);
		EnterRule(_localctx, 2, RULE_criteria);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45; logicalcriteriagroups();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalcriteriagroupsContext : ParserRuleContext {
		public CriterionorgroupContext[] criterionorgroup() {
			return GetRuleContexts<CriterionorgroupContext>();
		}
		public CriterionorgroupContext criterionorgroup(int i) {
			return GetRuleContext<CriterionorgroupContext>(i);
		}
		public LogicaloperatorContext[] logicaloperator() {
			return GetRuleContexts<LogicaloperatorContext>();
		}
		public LogicaloperatorContext logicaloperator(int i) {
			return GetRuleContext<LogicaloperatorContext>(i);
		}
		public LogicalcriteriagroupsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalcriteriagroups; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAgiilQueryVisitor<TResult> typedVisitor = visitor as IAgiilQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalcriteriagroups(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalcriteriagroupsContext logicalcriteriagroups() {
		LogicalcriteriagroupsContext _localctx = new LogicalcriteriagroupsContext(Context, State);
		EnterRule(_localctx, 4, RULE_logicalcriteriagroups);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47; criterionorgroup();
			State = 54;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPENPAREN) | (1L << AND) | (1L << OR) | (1L << NAME))) != 0)) {
				{
				{
				State = 49;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AND || _la==OR) {
					{
					State = 48; logicaloperator();
					}
				}

				State = 51; criterionorgroup();
				}
				}
				State = 56;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CriterionorgroupContext : ParserRuleContext {
		public CriterionContext criterion() {
			return GetRuleContext<CriterionContext>(0);
		}
		public CriteriagroupContext criteriagroup() {
			return GetRuleContext<CriteriagroupContext>(0);
		}
		public CriterionorgroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_criterionorgroup; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAgiilQueryVisitor<TResult> typedVisitor = visitor as IAgiilQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCriterionorgroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CriterionorgroupContext criterionorgroup() {
		CriterionorgroupContext _localctx = new CriterionorgroupContext(Context, State);
		EnterRule(_localctx, 6, RULE_criterionorgroup);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				{
				State = 57; criterion();
				}
				break;
			case OPENPAREN:
				{
				State = 58; criteriagroup();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CriteriagroupContext : ParserRuleContext {
		public ITerminalNode OPENPAREN() { return GetToken(AgiilQueryParser.OPENPAREN, 0); }
		public LogicalcriteriagroupsContext logicalcriteriagroups() {
			return GetRuleContext<LogicalcriteriagroupsContext>(0);
		}
		public ITerminalNode CLOSEPAREN() { return GetToken(AgiilQueryParser.CLOSEPAREN, 0); }
		public CriteriagroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_criteriagroup; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAgiilQueryVisitor<TResult> typedVisitor = visitor as IAgiilQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCriteriagroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CriteriagroupContext criteriagroup() {
		CriteriagroupContext _localctx = new CriteriagroupContext(Context, State);
		EnterRule(_localctx, 8, RULE_criteriagroup);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61; Match(OPENPAREN);
			State = 62; logicalcriteriagroups();
			State = 63; Match(CLOSEPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CriterionContext : ParserRuleContext {
		public ElementContext element() {
			return GetRuleContext<ElementContext>(0);
		}
		public ElementtestContext elementtest() {
			return GetRuleContext<ElementtestContext>(0);
		}
		public CriterionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_criterion; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAgiilQueryVisitor<TResult> typedVisitor = visitor as IAgiilQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCriterion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CriterionContext criterion() {
		CriterionContext _localctx = new CriterionContext(Context, State);
		EnterRule(_localctx, 10, RULE_criterion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65; element();
			State = 66; elementtest();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementtestContext : ParserRuleContext {
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public FunctioninvocationContext functioninvocation() {
			return GetRuleContext<FunctioninvocationContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(AgiilQueryParser.NOT, 0); }
		public ElementtestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementtest; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAgiilQueryVisitor<TResult> typedVisitor = visitor as IAgiilQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementtest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementtestContext elementtest() {
		ElementtestContext _localctx = new ElementtestContext(Context, State);
		EnterRule(_localctx, 12, RULE_elementtest);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				{
				State = 68; predicate();
				State = 69; value();
				}
				}
				break;
			case 2:
				{
				{
				State = 72;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 71; Match(NOT);
					}
				}

				State = 74; functioninvocation();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicaloperatorContext : ParserRuleContext {
		public ITerminalNode AND() { return GetToken(AgiilQueryParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(AgiilQueryParser.OR, 0); }
		public LogicaloperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicaloperator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAgiilQueryVisitor<TResult> typedVisitor = visitor as IAgiilQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicaloperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicaloperatorContext logicaloperator() {
		LogicaloperatorContext _localctx = new LogicaloperatorContext(Context, State);
		EnterRule(_localctx, 14, RULE_logicaloperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			_la = TokenStream.LA(1);
			if ( !(_la==AND || _la==OR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(AgiilQueryParser.NAME, 0); }
		public ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAgiilQueryVisitor<TResult> typedVisitor = visitor as IAgiilQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementContext element() {
		ElementContext _localctx = new ElementContext(Context, State);
		EnterRule(_localctx, 16, RULE_element);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		public PredicatenameContext predicatename() {
			return GetRuleContext<PredicatenameContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(AgiilQueryParser.NOT, 0); }
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAgiilQueryVisitor<TResult> typedVisitor = visitor as IAgiilQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		PredicateContext _localctx = new PredicateContext(Context, State);
		EnterRule(_localctx, 18, RULE_predicate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 81; Match(NOT);
				}
			}

			State = 84; predicatename();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicatenameContext : ParserRuleContext {
		public ITerminalNode EQUALS() { return GetToken(AgiilQueryParser.EQUALS, 0); }
		public ITerminalNode NOTEQUALS() { return GetToken(AgiilQueryParser.NOTEQUALS, 0); }
		public ITerminalNode TILDE() { return GetToken(AgiilQueryParser.TILDE, 0); }
		public ITerminalNode NAME() { return GetToken(AgiilQueryParser.NAME, 0); }
		public PredicatenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicatename; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAgiilQueryVisitor<TResult> typedVisitor = visitor as IAgiilQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicatename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicatenameContext predicatename() {
		PredicatenameContext _localctx = new PredicatenameContext(Context, State);
		EnterRule(_localctx, 20, RULE_predicatename);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQUALS) | (1L << NOTEQUALS) | (1L << TILDE) | (1L << NAME))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ConstantvalueContext constantvalue() {
			return GetRuleContext<ConstantvalueContext>(0);
		}
		public FunctioninvocationContext functioninvocation() {
			return GetRuleContext<FunctioninvocationContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAgiilQueryVisitor<TResult> typedVisitor = visitor as IAgiilQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 22, RULE_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 88; constantvalue();
				}
				break;
			case 2:
				{
				State = 89; functioninvocation();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantvalueContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(AgiilQueryParser.NAME, 0); }
		public ITerminalNode NOT() { return GetToken(AgiilQueryParser.NOT, 0); }
		public ITerminalNode AND() { return GetToken(AgiilQueryParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(AgiilQueryParser.OR, 0); }
		public ITerminalNode DESCENDING() { return GetToken(AgiilQueryParser.DESCENDING, 0); }
		public ITerminalNode ASCENDING() { return GetToken(AgiilQueryParser.ASCENDING, 0); }
		public ITerminalNode QUOTEDVALUE() { return GetToken(AgiilQueryParser.QUOTEDVALUE, 0); }
		public ITerminalNode[] WORD() { return GetTokens(AgiilQueryParser.WORD); }
		public ITerminalNode WORD(int i) {
			return GetToken(AgiilQueryParser.WORD, i);
		}
		public ConstantvalueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantvalue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAgiilQueryVisitor<TResult> typedVisitor = visitor as IAgiilQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantvalue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantvalueContext constantvalue() {
		ConstantvalueContext _localctx = new ConstantvalueContext(Context, State);
		EnterRule(_localctx, 24, RULE_constantvalue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				{
				State = 92; Match(NAME);
				}
				break;
			case NOT:
				{
				State = 93; Match(NOT);
				}
				break;
			case AND:
				{
				State = 94; Match(AND);
				}
				break;
			case OR:
				{
				State = 95; Match(OR);
				}
				break;
			case WORD:
				{
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 96; Match(WORD);
					}
					}
					State = 99;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WORD );
				}
				break;
			case DESCENDING:
				{
				State = 101; Match(DESCENDING);
				}
				break;
			case ASCENDING:
				{
				State = 102; Match(ASCENDING);
				}
				break;
			case QUOTEDVALUE:
				{
				State = 103; Match(QUOTEDVALUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctioninvocationContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(AgiilQueryParser.NAME, 0); }
		public ITerminalNode OPENPAREN() { return GetToken(AgiilQueryParser.OPENPAREN, 0); }
		public FunctionparametersContext functionparameters() {
			return GetRuleContext<FunctionparametersContext>(0);
		}
		public ITerminalNode CLOSEPAREN() { return GetToken(AgiilQueryParser.CLOSEPAREN, 0); }
		public FunctioninvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functioninvocation; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAgiilQueryVisitor<TResult> typedVisitor = visitor as IAgiilQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctioninvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctioninvocationContext functioninvocation() {
		FunctioninvocationContext _localctx = new FunctioninvocationContext(Context, State);
		EnterRule(_localctx, 26, RULE_functioninvocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106; Match(NAME);
			State = 107; Match(OPENPAREN);
			State = 108; functionparameters();
			State = 109; Match(CLOSEPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionparametersContext : ParserRuleContext {
		public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(AgiilQueryParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(AgiilQueryParser.COMMA, i);
		}
		public FunctionparametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionparameters; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAgiilQueryVisitor<TResult> typedVisitor = visitor as IAgiilQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionparameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionparametersContext functionparameters() {
		FunctionparametersContext _localctx = new FunctionparametersContext(Context, State);
		EnterRule(_localctx, 28, RULE_functionparameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NOT) | (1L << AND) | (1L << OR) | (1L << DESCENDING) | (1L << ASCENDING) | (1L << NAME) | (1L << WORD) | (1L << QUOTEDVALUE))) != 0)) {
				{
				State = 111; value();
				State = 116;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 112; Match(COMMA);
					State = 113; value();
					}
					}
					State = 118;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrdersContext : ParserRuleContext {
		public ITerminalNode ORDERBY() { return GetToken(AgiilQueryParser.ORDERBY, 0); }
		public OrderelementContext[] orderelement() {
			return GetRuleContexts<OrderelementContext>();
		}
		public OrderelementContext orderelement(int i) {
			return GetRuleContext<OrderelementContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(AgiilQueryParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(AgiilQueryParser.COMMA, i);
		}
		public OrdersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orders; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAgiilQueryVisitor<TResult> typedVisitor = visitor as IAgiilQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrders(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrdersContext orders() {
		OrdersContext _localctx = new OrdersContext(Context, State);
		EnterRule(_localctx, 30, RULE_orders);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121; Match(ORDERBY);
			State = 122; orderelement();
			State = 127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 123; Match(COMMA);
				State = 124; orderelement();
				}
				}
				State = 129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderelementContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(AgiilQueryParser.NAME, 0); }
		public FunctioninvocationContext functioninvocation() {
			return GetRuleContext<FunctioninvocationContext>(0);
		}
		public ITerminalNode ASCENDING() { return GetToken(AgiilQueryParser.ASCENDING, 0); }
		public ITerminalNode DESCENDING() { return GetToken(AgiilQueryParser.DESCENDING, 0); }
		public OrderelementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderelement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAgiilQueryVisitor<TResult> typedVisitor = visitor as IAgiilQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderelement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderelementContext orderelement() {
		OrderelementContext _localctx = new OrderelementContext(Context, State);
		EnterRule(_localctx, 32, RULE_orderelement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 130; Match(NAME);
				}
				break;
			case 2:
				{
				State = 131; functioninvocation();
				}
				break;
			}
			State = 135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DESCENDING || _la==ASCENDING) {
				{
				State = 134;
				_la = TokenStream.LA(1);
				if ( !(_la==DESCENDING || _la==ASCENDING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x15', '\x8C', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x3', '\x2', '\x5', 
		'\x2', '&', '\n', '\x2', '\x3', '\x2', '\x5', '\x2', ')', '\n', '\x2', 
		'\x3', '\x2', '\x5', '\x2', ',', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 
		'\x34', '\n', '\x4', '\x3', '\x4', '\a', '\x4', '\x37', '\n', '\x4', '\f', 
		'\x4', '\xE', '\x4', ':', '\v', '\x4', '\x3', '\x5', '\x3', '\x5', '\x5', 
		'\x5', '>', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x5', '\b', 'K', '\n', '\b', '\x3', '\b', '\x5', 
		'\b', 'N', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', 
		'\x3', '\v', '\x5', '\v', 'U', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x5', '\r', ']', '\n', '\r', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x6', '\xE', '\x64', '\n', '\xE', '\r', '\xE', '\xE', '\xE', '\x65', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', 'k', '\n', '\xE', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\a', '\x10', 'u', '\n', 
		'\x10', '\f', '\x10', '\xE', '\x10', 'x', '\v', '\x10', '\x5', '\x10', 
		'z', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\a', '\x11', '\x80', '\n', '\x11', '\f', '\x11', '\xE', '\x11', 
		'\x83', '\v', '\x11', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\x87', 
		'\n', '\x12', '\x3', '\x12', '\x5', '\x12', '\x8A', '\n', '\x12', '\x3', 
		'\x12', '\x2', '\x2', '\x13', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', 
		'\x2', '\x5', '\x3', '\x2', '\r', '\xE', '\x4', '\x2', '\x6', '\b', '\x12', 
		'\x12', '\x3', '\x2', '\x10', '\x11', '\x2', '\x91', '\x2', '%', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '/', '\x3', '\x2', '\x2', '\x2', '\x6', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\b', '=', '\x3', '\x2', '\x2', '\x2', '\n', 
		'?', '\x3', '\x2', '\x2', '\x2', '\f', '\x43', '\x3', '\x2', '\x2', '\x2', 
		'\xE', 'M', '\x3', '\x2', '\x2', '\x2', '\x10', 'O', '\x3', '\x2', '\x2', 
		'\x2', '\x12', 'Q', '\x3', '\x2', '\x2', '\x2', '\x14', 'T', '\x3', '\x2', 
		'\x2', '\x2', '\x16', 'X', '\x3', '\x2', '\x2', '\x2', '\x18', '\\', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', 'j', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'l', '\x3', '\x2', '\x2', '\x2', '\x1E', 'y', '\x3', '\x2', '\x2', '\x2', 
		' ', '{', '\x3', '\x2', '\x2', '\x2', '\"', '\x86', '\x3', '\x2', '\x2', 
		'\x2', '$', '&', '\a', '\x3', '\x2', '\x2', '%', '$', '\x3', '\x2', '\x2', 
		'\x2', '%', '&', '\x3', '\x2', '\x2', '\x2', '&', '(', '\x3', '\x2', '\x2', 
		'\x2', '\'', ')', '\x5', '\x4', '\x3', '\x2', '(', '\'', '\x3', '\x2', 
		'\x2', '\x2', '(', ')', '\x3', '\x2', '\x2', '\x2', ')', '+', '\x3', '\x2', 
		'\x2', '\x2', '*', ',', '\x5', ' ', '\x11', '\x2', '+', '*', '\x3', '\x2', 
		'\x2', '\x2', '+', ',', '\x3', '\x2', '\x2', '\x2', ',', '-', '\x3', '\x2', 
		'\x2', '\x2', '-', '.', '\a', '\x2', '\x2', '\x3', '.', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '/', '\x30', '\x5', '\x6', '\x4', '\x2', '\x30', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '\x31', '\x38', '\x5', '\b', '\x5', 
		'\x2', '\x32', '\x34', '\x5', '\x10', '\t', '\x2', '\x33', '\x32', '\x3', 
		'\x2', '\x2', '\x2', '\x33', '\x34', '\x3', '\x2', '\x2', '\x2', '\x34', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x35', '\x37', '\x5', '\b', '\x5', 
		'\x2', '\x36', '\x33', '\x3', '\x2', '\x2', '\x2', '\x37', ':', '\x3', 
		'\x2', '\x2', '\x2', '\x38', '\x36', '\x3', '\x2', '\x2', '\x2', '\x38', 
		'\x39', '\x3', '\x2', '\x2', '\x2', '\x39', '\a', '\x3', '\x2', '\x2', 
		'\x2', ':', '\x38', '\x3', '\x2', '\x2', '\x2', ';', '>', '\x5', '\f', 
		'\a', '\x2', '<', '>', '\x5', '\n', '\x6', '\x2', '=', ';', '\x3', '\x2', 
		'\x2', '\x2', '=', '<', '\x3', '\x2', '\x2', '\x2', '>', '\t', '\x3', 
		'\x2', '\x2', '\x2', '?', '@', '\a', '\x4', '\x2', '\x2', '@', '\x41', 
		'\x5', '\x6', '\x4', '\x2', '\x41', '\x42', '\a', '\x5', '\x2', '\x2', 
		'\x42', '\v', '\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\x5', '\x12', 
		'\n', '\x2', '\x44', '\x45', '\x5', '\xE', '\b', '\x2', '\x45', '\r', 
		'\x3', '\x2', '\x2', '\x2', '\x46', 'G', '\x5', '\x14', '\v', '\x2', 'G', 
		'H', '\x5', '\x18', '\r', '\x2', 'H', 'N', '\x3', '\x2', '\x2', '\x2', 
		'I', 'K', '\a', '\f', '\x2', '\x2', 'J', 'I', '\x3', '\x2', '\x2', '\x2', 
		'J', 'K', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\x3', '\x2', '\x2', '\x2', 
		'L', 'N', '\x5', '\x1C', '\xF', '\x2', 'M', '\x46', '\x3', '\x2', '\x2', 
		'\x2', 'M', 'J', '\x3', '\x2', '\x2', '\x2', 'N', '\xF', '\x3', '\x2', 
		'\x2', '\x2', 'O', 'P', '\t', '\x2', '\x2', '\x2', 'P', '\x11', '\x3', 
		'\x2', '\x2', '\x2', 'Q', 'R', '\a', '\x12', '\x2', '\x2', 'R', '\x13', 
		'\x3', '\x2', '\x2', '\x2', 'S', 'U', '\a', '\f', '\x2', '\x2', 'T', 'S', 
		'\x3', '\x2', '\x2', '\x2', 'T', 'U', '\x3', '\x2', '\x2', '\x2', 'U', 
		'V', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\x5', '\x16', '\f', '\x2', 
		'W', '\x15', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\t', '\x3', '\x2', 
		'\x2', 'Y', '\x17', '\x3', '\x2', '\x2', '\x2', 'Z', ']', '\x5', '\x1A', 
		'\xE', '\x2', '[', ']', '\x5', '\x1C', '\xF', '\x2', '\\', 'Z', '\x3', 
		'\x2', '\x2', '\x2', '\\', '[', '\x3', '\x2', '\x2', '\x2', ']', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '^', 'k', '\a', '\x12', '\x2', '\x2', '_', 
		'k', '\a', '\f', '\x2', '\x2', '`', 'k', '\a', '\r', '\x2', '\x2', '\x61', 
		'k', '\a', '\xE', '\x2', '\x2', '\x62', '\x64', '\a', '\x13', '\x2', '\x2', 
		'\x63', '\x62', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\x3', '\x2', 
		'\x2', '\x2', '\x65', '\x63', '\x3', '\x2', '\x2', '\x2', '\x65', '\x66', 
		'\x3', '\x2', '\x2', '\x2', '\x66', 'k', '\x3', '\x2', '\x2', '\x2', 'g', 
		'k', '\a', '\x10', '\x2', '\x2', 'h', 'k', '\a', '\x11', '\x2', '\x2', 
		'i', 'k', '\a', '\x14', '\x2', '\x2', 'j', '^', '\x3', '\x2', '\x2', '\x2', 
		'j', '_', '\x3', '\x2', '\x2', '\x2', 'j', '`', '\x3', '\x2', '\x2', '\x2', 
		'j', '\x61', '\x3', '\x2', '\x2', '\x2', 'j', '\x63', '\x3', '\x2', '\x2', 
		'\x2', 'j', 'g', '\x3', '\x2', '\x2', '\x2', 'j', 'h', '\x3', '\x2', '\x2', 
		'\x2', 'j', 'i', '\x3', '\x2', '\x2', '\x2', 'k', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', 'l', 'm', '\a', '\x12', '\x2', '\x2', 'm', 'n', '\a', '\x4', 
		'\x2', '\x2', 'n', 'o', '\x5', '\x1E', '\x10', '\x2', 'o', 'p', '\a', 
		'\x5', '\x2', '\x2', 'p', '\x1D', '\x3', '\x2', '\x2', '\x2', 'q', 'v', 
		'\x5', '\x18', '\r', '\x2', 'r', 's', '\a', '\t', '\x2', '\x2', 's', 'u', 
		'\x5', '\x18', '\r', '\x2', 't', 'r', '\x3', '\x2', '\x2', '\x2', 'u', 
		'x', '\x3', '\x2', '\x2', '\x2', 'v', 't', '\x3', '\x2', '\x2', '\x2', 
		'v', 'w', '\x3', '\x2', '\x2', '\x2', 'w', 'z', '\x3', '\x2', '\x2', '\x2', 
		'x', 'v', '\x3', '\x2', '\x2', '\x2', 'y', 'q', '\x3', '\x2', '\x2', '\x2', 
		'y', 'z', '\x3', '\x2', '\x2', '\x2', 'z', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '{', '|', '\a', '\xF', '\x2', '\x2', '|', '\x81', '\x5', '\"', 
		'\x12', '\x2', '}', '~', '\a', '\t', '\x2', '\x2', '~', '\x80', '\x5', 
		'\"', '\x12', '\x2', '\x7F', '}', '\x3', '\x2', '\x2', '\x2', '\x80', 
		'\x83', '\x3', '\x2', '\x2', '\x2', '\x81', '\x7F', '\x3', '\x2', '\x2', 
		'\x2', '\x81', '\x82', '\x3', '\x2', '\x2', '\x2', '\x82', '!', '\x3', 
		'\x2', '\x2', '\x2', '\x83', '\x81', '\x3', '\x2', '\x2', '\x2', '\x84', 
		'\x87', '\a', '\x12', '\x2', '\x2', '\x85', '\x87', '\x5', '\x1C', '\xF', 
		'\x2', '\x86', '\x84', '\x3', '\x2', '\x2', '\x2', '\x86', '\x85', '\x3', 
		'\x2', '\x2', '\x2', '\x87', '\x89', '\x3', '\x2', '\x2', '\x2', '\x88', 
		'\x8A', '\t', '\x4', '\x2', '\x2', '\x89', '\x88', '\x3', '\x2', '\x2', 
		'\x2', '\x89', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8A', '#', '\x3', 
		'\x2', '\x2', '\x2', '\x13', '%', '(', '+', '\x33', '\x38', '=', 'J', 
		'M', 'T', '\\', '\x65', 'j', 'v', 'y', '\x81', '\x86', '\x89',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Agiil.QueryLanguage
