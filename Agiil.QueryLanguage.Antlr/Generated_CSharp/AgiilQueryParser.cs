//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/craig/Projects/Agiil/Agiil.QueryLanguage.Antlr/Tools/../AgiilQuery.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Agiil.QueryLanguage.Generated {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class AgiilQueryParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OPENPAREN=1, CLOSEPAREN=2, EQUALS=3, NOTEQUALS=4, TILDE=5, COMMA=6, WHITESPACE=7, 
		NOT=8, AND=9, OR=10, NAME=11, WORD=12, DIGITS=13, QUOTEDVALUE=14, ANY=15;
	public const int
		RULE_criteria = 0, RULE_logicalcriteriagroups = 1, RULE_criterionorgroup = 2, 
		RULE_criteriagroup = 3, RULE_criterion = 4, RULE_elementtest = 5, RULE_logicalcombination = 6, 
		RULE_element = 7, RULE_predicate = 8, RULE_predicatename = 9, RULE_value = 10, 
		RULE_constantvalue = 11, RULE_functioninvocation = 12, RULE_functionparameters = 13;
	public static readonly string[] ruleNames = {
		"criteria", "logicalcriteriagroups", "criterionorgroup", "criteriagroup", 
		"criterion", "elementtest", "logicalcombination", "element", "predicate", 
		"predicatename", "value", "constantvalue", "functioninvocation", "functionparameters"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'='", "'!='", "'~'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OPENPAREN", "CLOSEPAREN", "EQUALS", "NOTEQUALS", "TILDE", "COMMA", 
		"WHITESPACE", "NOT", "AND", "OR", "NAME", "WORD", "DIGITS", "QUOTEDVALUE", 
		"ANY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AgiilQuery.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static AgiilQueryParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AgiilQueryParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AgiilQueryParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class CriteriaContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(AgiilQueryParser.Eof, 0); }
		public LogicalcriteriagroupsContext logicalcriteriagroups() {
			return GetRuleContext<LogicalcriteriagroupsContext>(0);
		}
		public ITerminalNode[] WHITESPACE() { return GetTokens(AgiilQueryParser.WHITESPACE); }
		public ITerminalNode WHITESPACE(int i) {
			return GetToken(AgiilQueryParser.WHITESPACE, i);
		}
		public CriteriaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_criteria; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAgiilQueryVisitor<TResult> typedVisitor = visitor as IAgiilQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCriteria(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CriteriaContext criteria() {
		CriteriaContext _localctx = new CriteriaContext(Context, State);
		EnterRule(_localctx, 0, RULE_criteria);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPENPAREN || _la==NAME) {
				{
				State = 28; logicalcriteriagroups();
				}
			}

			State = 34;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WHITESPACE) {
				{
				{
				State = 31; Match(WHITESPACE);
				}
				}
				State = 36;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 37; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalcriteriagroupsContext : ParserRuleContext {
		public CriterionorgroupContext[] criterionorgroup() {
			return GetRuleContexts<CriterionorgroupContext>();
		}
		public CriterionorgroupContext criterionorgroup(int i) {
			return GetRuleContext<CriterionorgroupContext>(i);
		}
		public LogicalcombinationContext[] logicalcombination() {
			return GetRuleContexts<LogicalcombinationContext>();
		}
		public LogicalcombinationContext logicalcombination(int i) {
			return GetRuleContext<LogicalcombinationContext>(i);
		}
		public LogicalcriteriagroupsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalcriteriagroups; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAgiilQueryVisitor<TResult> typedVisitor = visitor as IAgiilQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalcriteriagroups(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalcriteriagroupsContext logicalcriteriagroups() {
		LogicalcriteriagroupsContext _localctx = new LogicalcriteriagroupsContext(Context, State);
		EnterRule(_localctx, 2, RULE_logicalcriteriagroups);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39; criterionorgroup();
			State = 46;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPENPAREN) | (1L << AND) | (1L << OR) | (1L << NAME))) != 0)) {
				{
				{
				State = 41;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AND || _la==OR) {
					{
					State = 40; logicalcombination();
					}
				}

				State = 43; criterionorgroup();
				}
				}
				State = 48;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CriterionorgroupContext : ParserRuleContext {
		public CriterionContext criterion() {
			return GetRuleContext<CriterionContext>(0);
		}
		public CriteriagroupContext criteriagroup() {
			return GetRuleContext<CriteriagroupContext>(0);
		}
		public CriterionorgroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_criterionorgroup; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAgiilQueryVisitor<TResult> typedVisitor = visitor as IAgiilQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCriterionorgroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CriterionorgroupContext criterionorgroup() {
		CriterionorgroupContext _localctx = new CriterionorgroupContext(Context, State);
		EnterRule(_localctx, 4, RULE_criterionorgroup);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				{
				State = 49; criterion();
				}
				break;
			case OPENPAREN:
				{
				State = 50; criteriagroup();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CriteriagroupContext : ParserRuleContext {
		public ITerminalNode OPENPAREN() { return GetToken(AgiilQueryParser.OPENPAREN, 0); }
		public LogicalcriteriagroupsContext logicalcriteriagroups() {
			return GetRuleContext<LogicalcriteriagroupsContext>(0);
		}
		public ITerminalNode CLOSEPAREN() { return GetToken(AgiilQueryParser.CLOSEPAREN, 0); }
		public CriteriagroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_criteriagroup; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAgiilQueryVisitor<TResult> typedVisitor = visitor as IAgiilQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCriteriagroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CriteriagroupContext criteriagroup() {
		CriteriagroupContext _localctx = new CriteriagroupContext(Context, State);
		EnterRule(_localctx, 6, RULE_criteriagroup);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53; Match(OPENPAREN);
			State = 54; logicalcriteriagroups();
			State = 55; Match(CLOSEPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CriterionContext : ParserRuleContext {
		public ElementContext element() {
			return GetRuleContext<ElementContext>(0);
		}
		public ElementtestContext elementtest() {
			return GetRuleContext<ElementtestContext>(0);
		}
		public CriterionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_criterion; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAgiilQueryVisitor<TResult> typedVisitor = visitor as IAgiilQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCriterion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CriterionContext criterion() {
		CriterionContext _localctx = new CriterionContext(Context, State);
		EnterRule(_localctx, 8, RULE_criterion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57; element();
			State = 58; elementtest();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementtestContext : ParserRuleContext {
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public FunctioninvocationContext functioninvocation() {
			return GetRuleContext<FunctioninvocationContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(AgiilQueryParser.NOT, 0); }
		public ElementtestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementtest; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAgiilQueryVisitor<TResult> typedVisitor = visitor as IAgiilQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementtest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementtestContext elementtest() {
		ElementtestContext _localctx = new ElementtestContext(Context, State);
		EnterRule(_localctx, 10, RULE_elementtest);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				{
				State = 60; predicate();
				State = 61; value();
				}
				}
				break;
			case 2:
				{
				{
				State = 64;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 63; Match(NOT);
					}
				}

				State = 66; functioninvocation();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalcombinationContext : ParserRuleContext {
		public ITerminalNode AND() { return GetToken(AgiilQueryParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(AgiilQueryParser.OR, 0); }
		public LogicalcombinationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalcombination; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAgiilQueryVisitor<TResult> typedVisitor = visitor as IAgiilQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalcombination(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalcombinationContext logicalcombination() {
		LogicalcombinationContext _localctx = new LogicalcombinationContext(Context, State);
		EnterRule(_localctx, 12, RULE_logicalcombination);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			_la = TokenStream.LA(1);
			if ( !(_la==AND || _la==OR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(AgiilQueryParser.NAME, 0); }
		public ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAgiilQueryVisitor<TResult> typedVisitor = visitor as IAgiilQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementContext element() {
		ElementContext _localctx = new ElementContext(Context, State);
		EnterRule(_localctx, 14, RULE_element);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		public PredicatenameContext predicatename() {
			return GetRuleContext<PredicatenameContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(AgiilQueryParser.NOT, 0); }
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAgiilQueryVisitor<TResult> typedVisitor = visitor as IAgiilQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		PredicateContext _localctx = new PredicateContext(Context, State);
		EnterRule(_localctx, 16, RULE_predicate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 73; Match(NOT);
				}
			}

			State = 76; predicatename();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicatenameContext : ParserRuleContext {
		public ITerminalNode EQUALS() { return GetToken(AgiilQueryParser.EQUALS, 0); }
		public ITerminalNode NOTEQUALS() { return GetToken(AgiilQueryParser.NOTEQUALS, 0); }
		public ITerminalNode TILDE() { return GetToken(AgiilQueryParser.TILDE, 0); }
		public ITerminalNode NAME() { return GetToken(AgiilQueryParser.NAME, 0); }
		public PredicatenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicatename; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAgiilQueryVisitor<TResult> typedVisitor = visitor as IAgiilQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicatename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicatenameContext predicatename() {
		PredicatenameContext _localctx = new PredicatenameContext(Context, State);
		EnterRule(_localctx, 18, RULE_predicatename);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQUALS) | (1L << NOTEQUALS) | (1L << TILDE) | (1L << NAME))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ConstantvalueContext constantvalue() {
			return GetRuleContext<ConstantvalueContext>(0);
		}
		public FunctioninvocationContext functioninvocation() {
			return GetRuleContext<FunctioninvocationContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAgiilQueryVisitor<TResult> typedVisitor = visitor as IAgiilQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 20, RULE_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 80; constantvalue();
				}
				break;
			case 2:
				{
				State = 81; functioninvocation();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantvalueContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(AgiilQueryParser.NAME, 0); }
		public ITerminalNode QUOTEDVALUE() { return GetToken(AgiilQueryParser.QUOTEDVALUE, 0); }
		public ITerminalNode[] WORD() { return GetTokens(AgiilQueryParser.WORD); }
		public ITerminalNode WORD(int i) {
			return GetToken(AgiilQueryParser.WORD, i);
		}
		public ITerminalNode[] DIGITS() { return GetTokens(AgiilQueryParser.DIGITS); }
		public ITerminalNode DIGITS(int i) {
			return GetToken(AgiilQueryParser.DIGITS, i);
		}
		public ConstantvalueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantvalue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAgiilQueryVisitor<TResult> typedVisitor = visitor as IAgiilQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantvalue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantvalueContext constantvalue() {
		ConstantvalueContext _localctx = new ConstantvalueContext(Context, State);
		EnterRule(_localctx, 22, RULE_constantvalue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				{
				State = 84; Match(NAME);
				}
				break;
			case WORD:
			case DIGITS:
				{
				State = 86;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 85;
					_la = TokenStream.LA(1);
					if ( !(_la==WORD || _la==DIGITS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 88;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WORD || _la==DIGITS );
				}
				break;
			case QUOTEDVALUE:
				{
				State = 90; Match(QUOTEDVALUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctioninvocationContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(AgiilQueryParser.NAME, 0); }
		public ITerminalNode OPENPAREN() { return GetToken(AgiilQueryParser.OPENPAREN, 0); }
		public FunctionparametersContext functionparameters() {
			return GetRuleContext<FunctionparametersContext>(0);
		}
		public ITerminalNode CLOSEPAREN() { return GetToken(AgiilQueryParser.CLOSEPAREN, 0); }
		public FunctioninvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functioninvocation; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAgiilQueryVisitor<TResult> typedVisitor = visitor as IAgiilQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctioninvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctioninvocationContext functioninvocation() {
		FunctioninvocationContext _localctx = new FunctioninvocationContext(Context, State);
		EnterRule(_localctx, 24, RULE_functioninvocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93; Match(NAME);
			State = 94; Match(OPENPAREN);
			State = 95; functionparameters();
			State = 96; Match(CLOSEPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionparametersContext : ParserRuleContext {
		public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(AgiilQueryParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(AgiilQueryParser.COMMA, i);
		}
		public FunctionparametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionparameters; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAgiilQueryVisitor<TResult> typedVisitor = visitor as IAgiilQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionparameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionparametersContext functionparameters() {
		FunctionparametersContext _localctx = new FunctionparametersContext(Context, State);
		EnterRule(_localctx, 26, RULE_functionparameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NAME) | (1L << WORD) | (1L << DIGITS) | (1L << QUOTEDVALUE))) != 0)) {
				{
				State = 98; value();
				State = 103;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 99; Match(COMMA);
					State = 100; value();
					}
					}
					State = 105;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x11', 'o', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x3', '\x2', '\x5', '\x2', ' ', '\n', 
		'\x2', '\x3', '\x2', '\a', '\x2', '#', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', '&', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x5', '\x3', ',', '\n', '\x3', '\x3', '\x3', '\a', '\x3', '/', 
		'\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x32', '\v', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x5', '\x4', '\x36', '\n', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 
		'\x43', '\n', '\a', '\x3', '\a', '\x5', '\a', '\x46', '\n', '\a', '\x3', 
		'\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x5', '\n', 
		'M', '\n', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', 
		'\f', '\x3', '\f', '\x5', '\f', 'U', '\n', '\f', '\x3', '\r', '\x3', '\r', 
		'\x6', '\r', 'Y', '\n', '\r', '\r', '\r', '\xE', '\r', 'Z', '\x3', '\r', 
		'\x5', '\r', '^', '\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\a', '\xF', 'h', '\n', '\xF', '\f', '\xF', '\xE', '\xF', 'k', '\v', '\xF', 
		'\x5', '\xF', 'm', '\n', '\xF', '\x3', '\xF', '\x2', '\x2', '\x10', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', 
		'\x18', '\x1A', '\x1C', '\x2', '\x5', '\x3', '\x2', '\v', '\f', '\x4', 
		'\x2', '\x5', '\a', '\r', '\r', '\x3', '\x2', '\xE', '\xF', '\x2', 'n', 
		'\x2', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x4', ')', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '\x35', '\x3', '\x2', '\x2', '\x2', '\b', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\n', ';', '\x3', '\x2', '\x2', '\x2', '\f', '\x45', 
		'\x3', '\x2', '\x2', '\x2', '\xE', 'G', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'I', '\x3', '\x2', '\x2', '\x2', '\x12', 'L', '\x3', '\x2', '\x2', '\x2', 
		'\x14', 'P', '\x3', '\x2', '\x2', '\x2', '\x16', 'T', '\x3', '\x2', '\x2', 
		'\x2', '\x18', ']', '\x3', '\x2', '\x2', '\x2', '\x1A', '_', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', 'l', '\x3', '\x2', '\x2', '\x2', '\x1E', ' ', '\x5', 
		'\x4', '\x3', '\x2', '\x1F', '\x1E', '\x3', '\x2', '\x2', '\x2', '\x1F', 
		' ', '\x3', '\x2', '\x2', '\x2', ' ', '$', '\x3', '\x2', '\x2', '\x2', 
		'!', '#', '\a', '\t', '\x2', '\x2', '\"', '!', '\x3', '\x2', '\x2', '\x2', 
		'#', '&', '\x3', '\x2', '\x2', '\x2', '$', '\"', '\x3', '\x2', '\x2', 
		'\x2', '$', '%', '\x3', '\x2', '\x2', '\x2', '%', '\'', '\x3', '\x2', 
		'\x2', '\x2', '&', '$', '\x3', '\x2', '\x2', '\x2', '\'', '(', '\a', '\x2', 
		'\x2', '\x3', '(', '\x3', '\x3', '\x2', '\x2', '\x2', ')', '\x30', '\x5', 
		'\x6', '\x4', '\x2', '*', ',', '\x5', '\xE', '\b', '\x2', '+', '*', '\x3', 
		'\x2', '\x2', '\x2', '+', ',', '\x3', '\x2', '\x2', '\x2', ',', '-', '\x3', 
		'\x2', '\x2', '\x2', '-', '/', '\x5', '\x6', '\x4', '\x2', '.', '+', '\x3', 
		'\x2', '\x2', '\x2', '/', '\x32', '\x3', '\x2', '\x2', '\x2', '\x30', 
		'.', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x31', '\x5', '\x3', '\x2', '\x2', '\x2', '\x32', '\x30', '\x3', 
		'\x2', '\x2', '\x2', '\x33', '\x36', '\x5', '\n', '\x6', '\x2', '\x34', 
		'\x36', '\x5', '\b', '\x5', '\x2', '\x35', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x35', '\x34', '\x3', '\x2', '\x2', '\x2', '\x36', '\a', '\x3', 
		'\x2', '\x2', '\x2', '\x37', '\x38', '\a', '\x3', '\x2', '\x2', '\x38', 
		'\x39', '\x5', '\x4', '\x3', '\x2', '\x39', ':', '\a', '\x4', '\x2', '\x2', 
		':', '\t', '\x3', '\x2', '\x2', '\x2', ';', '<', '\x5', '\x10', '\t', 
		'\x2', '<', '=', '\x5', '\f', '\a', '\x2', '=', '\v', '\x3', '\x2', '\x2', 
		'\x2', '>', '?', '\x5', '\x12', '\n', '\x2', '?', '@', '\x5', '\x16', 
		'\f', '\x2', '@', '\x46', '\x3', '\x2', '\x2', '\x2', '\x41', '\x43', 
		'\a', '\n', '\x2', '\x2', '\x42', '\x41', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '\x43', '\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\x3', '\x2', 
		'\x2', '\x2', '\x44', '\x46', '\x5', '\x1A', '\xE', '\x2', '\x45', '>', 
		'\x3', '\x2', '\x2', '\x2', '\x45', '\x42', '\x3', '\x2', '\x2', '\x2', 
		'\x46', '\r', '\x3', '\x2', '\x2', '\x2', 'G', 'H', '\t', '\x2', '\x2', 
		'\x2', 'H', '\xF', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\a', '\r', '\x2', 
		'\x2', 'J', '\x11', '\x3', '\x2', '\x2', '\x2', 'K', 'M', '\a', '\n', 
		'\x2', '\x2', 'L', 'K', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\x3', '\x2', 
		'\x2', '\x2', 'M', 'N', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\x5', '\x14', 
		'\v', '\x2', 'O', '\x13', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\t', 
		'\x3', '\x2', '\x2', 'Q', '\x15', '\x3', '\x2', '\x2', '\x2', 'R', 'U', 
		'\x5', '\x18', '\r', '\x2', 'S', 'U', '\x5', '\x1A', '\xE', '\x2', 'T', 
		'R', '\x3', '\x2', '\x2', '\x2', 'T', 'S', '\x3', '\x2', '\x2', '\x2', 
		'U', '\x17', '\x3', '\x2', '\x2', '\x2', 'V', '^', '\a', '\r', '\x2', 
		'\x2', 'W', 'Y', '\t', '\x4', '\x2', '\x2', 'X', 'W', '\x3', '\x2', '\x2', 
		'\x2', 'Y', 'Z', '\x3', '\x2', '\x2', '\x2', 'Z', 'X', '\x3', '\x2', '\x2', 
		'\x2', 'Z', '[', '\x3', '\x2', '\x2', '\x2', '[', '^', '\x3', '\x2', '\x2', 
		'\x2', '\\', '^', '\a', '\x10', '\x2', '\x2', ']', 'V', '\x3', '\x2', 
		'\x2', '\x2', ']', 'X', '\x3', '\x2', '\x2', '\x2', ']', '\\', '\x3', 
		'\x2', '\x2', '\x2', '^', '\x19', '\x3', '\x2', '\x2', '\x2', '_', '`', 
		'\a', '\r', '\x2', '\x2', '`', '\x61', '\a', '\x3', '\x2', '\x2', '\x61', 
		'\x62', '\x5', '\x1C', '\xF', '\x2', '\x62', '\x63', '\a', '\x4', '\x2', 
		'\x2', '\x63', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x64', 'i', '\x5', 
		'\x16', '\f', '\x2', '\x65', '\x66', '\a', '\b', '\x2', '\x2', '\x66', 
		'h', '\x5', '\x16', '\f', '\x2', 'g', '\x65', '\x3', '\x2', '\x2', '\x2', 
		'h', 'k', '\x3', '\x2', '\x2', '\x2', 'i', 'g', '\x3', '\x2', '\x2', '\x2', 
		'i', 'j', '\x3', '\x2', '\x2', '\x2', 'j', 'm', '\x3', '\x2', '\x2', '\x2', 
		'k', 'i', '\x3', '\x2', '\x2', '\x2', 'l', '\x64', '\x3', '\x2', '\x2', 
		'\x2', 'l', 'm', '\x3', '\x2', '\x2', '\x2', 'm', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\xF', '\x1F', '$', '+', '\x30', '\x35', '\x42', '\x45', 
		'L', 'T', 'Z', ']', 'i', 'l',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Agiil.QueryLanguage.Generated
